include "List.aes"

contract interface MainStaking =
  entrypoint sorted_validators : () => list((address * int))
  entrypoint total_stake : () => int
  stateful entrypoint post_elect : () => unit


main contract HCElection =
  record state =
    { main_staking_ct       : MainStaking,
      entropy               : string,
      leader                : address,
      added_stake           : int
    }

  record get_state_response =
    { main_staking_ct       : MainStaking,
      entropy               : string,
      leader                : address,
      added_stake           : int
    }

  entrypoint init(main_staking_ct : MainStaking, entropy_str : string) =
    { main_staking_ct       = main_staking_ct,
      leader                = Contract.address,
      entropy               = entropy_str,
      added_stake           = 0
      }

  stateful entrypoint elect(entropy_str : string, commitments : map(hash, list(address))) =
    assert_protocol_call()
    let (new_leader, added_staking_power) = elect_(entropy_str, commitments)
    state.main_staking_ct.post_elect()
    put(state{ leader = new_leader, entropy = entropy_str, added_stake = added_staking_power})
    (new_leader, added_staking_power)

  stateful entrypoint elect_after_lazy_leader(new_leader : address) =
    assert_protocol_call()
    let sorted0 = state.main_staking_ct.sorted_validators() 
    let (sorted1, total_s, _)  = List.foldl(filter_posted_commitments, ([], 0, [new_leader]), sorted0)
    let unknown_validator = List.is_empty(sorted1)
    require(unknown_validator == false, "Must be a validator")
    put(state{ leader = new_leader, entropy = "lazy_leader", added_stake = 0})
    (new_leader, 0)
        

  entrypoint elect_next(entropy_str : string, commitments : map(hash, list(address))) =
    let (leader, staking_power) = elect_(entropy_str, commitments)
    (leader, staking_power)

  function elect_(entropy_str : string, commitments : map(hash, list(address))) =
    let Some(current_hash : hash) = Chain.block_hash(Chain.block_height) // current hash!
    let entropy : hash = Crypto.sha256(entropy_str)
    let sorted0 = state.main_staking_ct.sorted_validators() 
    let accepted_commitments = commitments[current_hash]
    let (sorted, total_stake, _)  = List.foldl(filter_posted_commitments, ([], 0, accepted_commitments), sorted0)
    let shot = Bytes.to_int(entropy) mod total_stake
    switch(find_validator(sorted, shot))
      None => abort("NO CANDIDATE") // should not be possible
      Some(new_leader) => (new_leader, total_stake)

  entrypoint leader() =
    state.leader

  entrypoint added_stake() =
    state.added_stake

  entrypoint get_state() : get_state_response =
    { main_staking_ct   = state.main_staking_ct,
      entropy           = state.entropy,
      leader            = state.leader,
      added_stake       = state.added_stake
      }

  function find_validator(validators, shot) =
    switch(validators)
      []   => None
      (validator_addr, validator_stake : int)::t =>
        if(validator_stake > shot) Some(validator_addr)
        else find_validator(t, shot - validator_stake)

  function assert_protocol_call() =
      require(Call.caller == Contract.creator, "Must be called by the protocol")

  function filter_posted_commitments((accum, total_s, commitments), (addr, stake)) =
    if (List.contains(addr, commitments))
        ((addr, stake) :: accum, stake + total_s, commitments)
    else
        (accum, total_s, commitments)

